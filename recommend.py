import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
import json
import os

# Define paths
csv_path = os.path.join('recommendations', 'user_orders.csv')
output_path = os.path.join('recommendations', 'recommendations.json')

# Check if CSV exists
try:
    orders_df = pd.read_csv(csv_path)
except FileNotFoundError:
    print(f"Error: {csv_path} not found. Please run export_orders_to_csv.php first.")
    with open(output_path, 'w') as f:
        json.dump({}, f)
    print(f"Empty recommendations saved to {output_path}")
    exit(1)

# Check if orders DataFrame is empty
if orders_df.empty:
    print(f"Error: {csv_path} is empty. No order data available.")
    with open(output_path, 'w') as f:
        json.dump({}, f)
    print(f"Empty recommendations saved to {output_path}")
    exit(1)

# Load favorite dishes and cart data from CSV (generated by export script)
favorites_csv = os.path.join('recommendations', 'user_favorites.csv')
cart_csv = os.path.join('recommendations', 'user_cart.csv')

favorites_df = pd.DataFrame(columns=['u_id', 'd_id', 'quantity'])
cart_df = pd.DataFrame(columns=['u_id', 'd_id', 'quantity'])

if os.path.exists(favorites_csv):
    favorites_df = pd.read_csv(favorites_csv)
if os.path.exists(cart_csv):
    cart_df = pd.read_csv(cart_csv)

# Assign weights
favorites_df['quantity'] = 2.0  # Higher weight for favorites
cart_df['quantity'] = 1.5      # Moderate weight for cart items
orders_df['quantity'] = orders_df['quantity'].astype(float)  # Ensure orders quantity is float

# Combine data
combined_df = pd.concat([
    orders_df[['u_id', 'd_id', 'quantity']],
    favorites_df[['u_id', 'd_id', 'quantity']],
    cart_df[['u_id', 'd_id', 'quantity']]
], ignore_index=True)

# Aggregate quantities by user and dish
combined_df = combined_df.groupby(['u_id', 'd_id'])['quantity'].sum().reset_index()

# Create user-item matrix
user_item_matrix = combined_df.pivot_table(index='u_id', columns='d_id', values='quantity', fill_value=0)

# Compute item similarity
item_similarity = cosine_similarity(user_item_matrix.T)
item_similarity_df = pd.DataFrame(item_similarity, index=user_item_matrix.columns, columns=user_item_matrix.columns)

def get_recommendations(user_id, user_item_matrix, item_similarity_df, top_n=5):
    if user_id not in user_item_matrix.index:
        return []
    
    user_interactions = user_item_matrix.loc[user_id]
    interacted_items = user_interactions[user_interactions > 0].index
    
    scores = pd.Series(0.0, index=user_item_matrix.columns)
    for item in interacted_items:
        sim_scores = item_similarity_df[item]
        scores += sim_scores * user_interactions[item]
    
    scores = scores.drop(interacted_items, errors='ignore')
    top_items = scores.nlargest(top_n).index.tolist()
    return top_items

# Generate recommendations
recommendations = {}
for user_id in user_item_matrix.index:
    recommendations[str(user_id)] = get_recommendations(user_id, user_item_matrix, item_similarity_df)

# Save recommendations
with open(output_path, 'w') as f:
    json.dump(recommendations, f)

print(f"Recommendations saved to {output_path}")